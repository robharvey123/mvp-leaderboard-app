// src/pages/ai/Copilot.tsx
import { useMemo, useState } from "react";
import ReactMarkdown from "react-markdown";

type MockStats = {
  topScorer: string; topScorerRuns: number;
  topBowler: string; topBowlerWkts: number;
  teamPoints: number; matches: number;
  highlights: string[];
};

function makeMockStats(week: string): MockStats {
  // You can wire real data later; this is placeholder logic
  const seed = week.split("-").reduce((a, b) => a + b.charCodeAt(0), 0);
  const r = (n: number) => (seed % n) + Math.floor(n / 3);
  return {
    topScorer: ["J. Smith", "R. Patel", "A. Khan", "M. Brown"][seed % 4],
    topScorerRuns: 40 + r(60),
    topBowler: ["T. Green", "S. Ali", "P. Jones", "D. Roy"][seed % 4],
    topBowlerWkts: 2 + (seed % 4),
    teamPoints: 120 + r(80),
    matches: 2 + (seed % 3),
    highlights: [
      "Nail‑biter chase at home ground.",
      "Three maidens in the powerplay.",
      "Fifty stand for the 7th wicket.",
    ].slice(0, 2 + (seed % 2)),
  };
}

export default function Copilot() {
  const [week, setWeek] = useState<string>(() => isoWeekOf(new Date()));
  const [notes, setNotes] = useState<string>("Focus on bowling economy in the powerplay and boundary% for openers.");
  const stats = useMemo(() => makeMockStats(week), [week]);

  const md = useMemo(() => {
    return `# Weekly Report — ${week}

**Team summary**
- Matches played: **${stats.matches}**
- Total MVP points: **${stats.teamPoints}**

**Top performances**
- Batting: **${stats.topScorer}** — **${stats.topScorerRuns}** runs
- Bowling: **${stats.topBowler}** — **${stats.topBowlerWkts}** wickets

**Highlights**
${stats.highlights.map(h => `- ${h}`).join("\n")}

**Coach notes**
${notes}

---

*Generated by Copilot (stub). Replace with real data once parsing & scoring are fully wired.*`;
  }, [week, stats, notes]);

  function handleExport() {
    // Placeholder: you’ll replace with real PDF/image export later
    alert("Export placeholder — wire to CSV/PDF exporter when ready.");
  }

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-4">
      <h1 className="text-2xl font-bold">AI Copilot — Weekly Report (Stub)</h1>

      <div className="grid gap-3 md:grid-cols-3">
        <label className="flex flex-col gap-1">
          <span className="text-sm font-medium">Week (ISO week)</span>
          <input
            className="border rounded px-3 py-2"
            type="week"
            value={weekToInput(week)}
            onChange={(e) => setWeek(inputToWeek(e.target.value))}
          />
        </label>
        <div className="md:col-span-2">
          <label className="flex flex-col gap-1">
            <span className="text-sm font-medium">Coach notes / prompt</span>
            <textarea
              className="border rounded px-3 py-2 h-24 w-full"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add talking points or questions for the report…"
            />
          </label>
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        <section className="p-4 rounded-2xl bg-white shadow-sm border">
          <h2 className="font-semibold mb-2">Preview (Markdown)</h2>
          <div className="prose prose-sm max-w-none">
            <ReactMarkdown>{md}</ReactMarkdown>
          </div>
        </section>
        <section className="p-4 rounded-2xl bg-white shadow-sm border">
          <h2 className="font-semibold mb-2">Actions</h2>
          <button
            onClick={handleExport}
            className="px-4 py-2 rounded bg-black text-white"
          >
            Export (CSV/PDF placeholder)
          </button>
          <p className="text-xs text-neutral-500 mt-2">
            Later: choose **club/season/team**, fetch real data via Supabase, and render PDFs.
          </p>
        </section>
      </div>
    </div>
  );
}

function isoWeekOf(d: Date) {
  // YYYY-Www format
  const date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
  const dayNum = date.getUTCDay() || 7;
  date.setUTCDate(date.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
  const weekNo = Math.ceil((((+date - +yearStart) / 86400000) + 1) / 7);
  const yyyy = date.getUTCFullYear();
  return `${yyyy}-W${String(weekNo).padStart(2, "0")}`;
}

function weekToInput(week: string) {
  // already ISO week; browsers expect yyyy-Www
  return week;
}
function inputToWeek(v: string) {
  return v;
}
